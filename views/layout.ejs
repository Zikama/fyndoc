<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8" />
    <meta http-equiv="X-UA-Compatible" content="ie=edge" />
    <meta name="author" lang="en" content="Nehemie Zikama" />
    <meta name="copyright" lang="en" content="2019" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta http-equiv="content-language" content="en" />
    <meta name="description" content=" Sadja Web Solutions Contract Manager" />
    <link href="https://github.com/zikama" rel="author" />
    <meta name="theme-color" content="rgb(236, 236, 236)" />

    <!-- <link href="https://fonts.googleapis.com/css?family=Martel|Quattrocento+Sans" rel="stylesheet"> -->
    <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Montserra|Quattrocento" />
    <link rel="stylesheet " href="https://use.fontawesome.com/releases/v5.8.2/css/all.css " integrity="sha384-oS3vJWv+0UjzBfQzYUhtDYW+Pj2yciDJxpsK1OYPAYjqT085Qq/1cq5FLXAZQ7Ay " crossorigin="anonymous " />
    <link rel="icon" href="<%=typeof pathToTheRoot !=='undefined'?pathToTheRoot:'../'%>favicon" />
    <!-- Medium editor -->
    <link rel="stylesheet" href="<%=typeof pathToTheRoot !=='undefined'?pathToTheRoot:'../'%>assets_/medium-editor-embed-button/dist/css/medium-editor-embed-button.min.css" type="text/css" media="screen" charset="utf-8" />
    <link rel="stylesheet" href="<%=typeof pathToTheRoot !=='undefined'?pathToTheRoot:'./'%>assets_/medium-editor/dist/css/medium-editor.css" />
    <link href="https://netdna.bootstrapcdn.com/font-awesome/4.2.0/css/font-awesome.css" rel="stylesheet" />
    <link rel="stylesheet" href="<%=typeof pathToTheRoot !=='undefined'?pathToTheRoot:'./'%>assets_/medium-editor/dist/css/themes/beagle.css" />

    <% if (typeof no_manifest!= "undefined" &&!no_manifest) {%>
        <link rel="manifest" href="<%=typeof pathToTheRoot !=='undefined'?pathToTheRoot:'../'%>manifest.json" />
        <% } %>
            <% if(typeof original_css!= "undefined"&&original_css) { %>
                <link rel="stylesheet" type="text/css" href="<%=typeof pathToTheRoot !=='undefined'?pathToTheRoot:'../../'%>assets/css/style.css" />
                <% } %>
                    <% if(typeof custome_css!= "undefined"&& custome_css &&
    custome_css[0] !=""){ %>
                        <link rel="stylesheet" href="<%=typeof pathToTheRoot !=='undefined'?pathToTheRoot:'../../'%><%=custome_css[0]%>" />
                        <% } %>

                            <title>
                                <% if(title.true){%>
                                    <%=title.name%>
                                        <%}%>
                            </title>
                            <script>
                                // Define the socket Path
                                let soc = `${window.location.origin
        .replace("http", "ws")
        .replace("https", "wss")}`;
                            </script>
</head>

<body>
    <%-body %>
        <script src="https://unpkg.com/axios/dist/axios.min.js"></script>
        <script>
            function keepLive() {
                axios({
                        method: "post",
                        url: "<%=typeof pathToTheRoot !=='undefined'?pathToTheRoot:'/'%>keeplive"
                    })
                    .then(value => {
                        // The server is active now
                        // console.log("i'am active");
                    })
                    .catch(err => {
                        console.log(err); // There was an error
                    });
            }
            setInterval(keepLive, 2000);

            let inp = document.querySelectorAll(".editor_input");
            if (typeof inp != "undefined" && inp.length) {
                for (_in of inp) {
                    if (_in) {
                        _in.addEventListener("keyup", e_ => {
                            let lwgth = _in.value.length - 2 <= 0 ? 1 : _in.value.length - 2;
                            lwgth = _in.value.length - 3 <= 3 ? 3 : _in.value.length - 3;
                            lwgth = _in.value.length - 5 <= 5 ? 6 : _in.value.length - 5;
                            _in.setAttribute("size", lwgth);
                        });
                    }
                }
            }
            let sock;

            function connect() {
                sock = new WebSocket(soc);

                sock.onopen = function() {
                    function _keepLive() {
                        if (sock.readyState == sock.OPEN) {
                            sock.send(
                                JSON.stringify({
                                    type: "keepAlive",
                                    to: "keepAlive",
                                    date: Date.now()
                                })
                            );
                        }
                    }
                    setInterval(_keepLive, 2000);
                    if (sock.readyState == sock.OPEN) {
                        sock.send(
                            JSON.stringify({
                                type: "visits",
                                date: Date.now(),
                                times: 0
                            })
                        );
                    }
                };

                sock.onclose = function(e) {
                    console.log(
                        "Socket is closed. Reconnect will be attempted in 5 second.",
                        e.reason
                    );
                    setTimeout(function() {
                        connect();
                    }, 5000);
                };

                sock.onerror = function(err) {
                    console.error(
                        "Socket encountered error: ",
                        err.message,
                        "Closing socket"
                    );
                    sock.close();
                };


                // Global vars for message to look up
                let contract_template = document.querySelector("#contract_template");

                const create_contract_template = document.querySelector(
                    "#create_contract_template"
                );
                // _drafter
                let _draft = create_contract_template.querySelector(".under_draft");

                const create_proposal_template = document.querySelector(
                    "#create_proposal_template"
                );
                // drafter
                let draft = create_proposal_template.querySelector(".under_draft");

                let proposal_template = document.querySelector("#proposal_template");

                keepLive1();

                function keepLive1() {
                    let timeouter_;

                    function _saveToDraft(e) {
                        clearTimeout(timeouter_);
                        timeouter_ = setTimeout(() => {
                            if (sock.readyState == sock.OPEN) {
                                sock.send(
                                    JSON.stringify({
                                        type: "draft",
                                        to: "contract",
                                        data: `${contract_template.innerHTML}`
                                    })
                                );
                            } else {
                                console.log(sock.readyState);
                                console.log(sock.OPEN);
                            }
                        }, 1000);
                    }

                    contract_template.addEventListener("keyup", _saveToDraft);

                    _draft.addEventListener("click", _saveToDraft);

                    create_contract_template.addEventListener("submit", e => {
                        // Prevent form submission
                        e.preventDefault();
                        if (sock.readyState == sock.OPEN) {
                            sock.send(
                                JSON.stringify({
                                    type: "save",
                                    to: "contract",
                                    _date: new Date(),
                                    auto: "false",
                                    data: `${contract_template.innerHTML}`
                                })
                            );
                        } else {
                            alert("NO");
                        }
                    });
                }
                keepLive2();

                function keepLive2() {
                    let timeouter;

                    function __saveToDraft() {
                        clearTimeout(timeouter);
                        timeouter = setTimeout(() => {
                            if (sock.readyState == sock.OPEN) {
                                sock.send(
                                    JSON.stringify({
                                        type: "draft",
                                        to: "proposal",
                                        data: `${proposal_template.innerHTML}`
                                    })
                                );
                            }
                        }, 1000);
                    }
                    proposal_template.addEventListener("keyup", __saveToDraft);
                    draft.addEventListener("click", __saveToDraft);

                    create_proposal_template.addEventListener("submit", e => {
                        e.preventDefault();
                        if (sock.readyState == sock.OPEN) {
                            sock.send(
                                JSON.stringify({
                                    type: "save",
                                    to: "proposal",
                                    _date: new Date(),
                                    auto: "false",
                                    data: `${proposal_template.innerHTML}`
                                })
                            );
                        }
                    });
                }
                sock.onmessage = function(json) {
                    json = JSON.parse(json.data);

                    if (json.type === "draft" && json.to === "contract") {
                        _draft.style.background = "linear-gradient(45deg, #bb4343, #f0f4f5)";
                        _draft.value = json.data;

                        setTimeout(() => {
                            _draft.style.background =
                                "linear-gradient(45deg, #888888, #f0f4f5)";
                            _draft.value = "Save to draft";
                        }, 1000);
                    }

                    // Contract saved successfully
                    if (json.type === "save" && json.to === "contract") {
                        _draft.style.background = "linear-gradient(45deg, #bb4343, #f0f4f5)";
                        _draft.value = json.data;

                        setTimeout(() => {
                            _draft.style.background =
                                "linear-gradient(45deg, #888888, #f0f4f5)";
                            _draft.value = "Save to draft";
                        }, 1000);
                    }
                    if (json.type === "draft" && json.to === "proposal") {
                        draft.style.background = "linear-gradient(45deg, #bb4343, #f0f4f5)";
                        draft.value = json.data;

                        setTimeout(() => {
                            draft.style.background = "linear-gradient(45deg, #888888, #f0f4f5)";
                            draft.value = "Save to draft";
                        }, 1000);
                    }

                    // Proposal saved successfully
                    if (json.type === "save" && json.to === "proposal") {
                        let draft = create_proposal_template.querySelector(".under_draft");
                        draft.style.background = "linear-gradient(45deg, #bb4343, #f0f4f5)";
                        draft.value = json.data;

                        setTimeout(() => {
                            draft.style.background = "linear-gradient(45deg, #888888, #f0f4f5)";
                            draft.value = "Save to draft";
                        }, 1000);
                    }
                };
            }
            connect();
        </script>
</body>

</html>